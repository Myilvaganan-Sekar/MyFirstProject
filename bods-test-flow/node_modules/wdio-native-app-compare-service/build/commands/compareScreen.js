"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = compareScreen;

var _options = require("../helpers/options");

var _checkBaselineImageExists = require("../methods/checkBaselineImageExists");

var _rectangles = require("../methods/rectangles");

var _executeCompare = require("../methods/executeCompare");

/**
 * Compare a screen against a baseline
 *
 * @param {string}  tag
 * @param {object}  options
 * @param {object}  options
 * @param {boolean} options.blockOuts One or multiple block outs on a screen / element can be provided in an Array with objects
 * @param {boolean} options.ignoreAlpha compare images and discard alpha
 * @param {boolean} options.ignoreAntialiasing compare images and discard anti aliasing
 * @param {boolean} options.ignoreColors Even though the images are in colour, the comparison wil compare 2 black/white images
 * @param {boolean} options.ignoreLess compare images and compare with red = 16, green = 16, blue = 16, alpha = 16,
 *   minBrightness=16,maxBrightness=240
 * @param {boolean} options.ignoreNothing compare images and compare with red = 0, green = 0, blue = 0, alpha = 0,
 *   minBrightness=0,maxBrightness=255
 * @param {object}  options.output
 * @param {number}  options.largeImageThreshold Enable skipping pixels during the comparison to mitigate performance issues based on
 *   amount of pixels (width / height), default 0
 * @param {object}  options.errorColor
 * @param {number}  options.red
 * @param {number}  options.green
 * @param {number}  options.blue
 *
 * @return {Promise<{
 *      fileName: {string},
 *      folders: {object},
 *      misMatchPercentage: number
 *      baselineCreated: boolean
 * }>}
 */
async function compareScreen(tag, options = {}) {
  // Determine the screen compare options
  const screenCompareOptions = { ...this.compareOptions,
    ...(0, _options.instanceCompareOptions)(options)
  }; // Save the screen and return the data

  const screenshotData = await driver.saveScreen(tag, true); // Check if the baseline image exists

  const baselineImageExists = await (0, _checkBaselineImageExists.checkBaselineImageExists)(this.folders, screenshotData.fileName, this.autoSaveBaseline); // Determine the ignore rectangles

  const ignoredBoxes = await (0, _rectangles.determineIgnoreRectangles)(screenshotData.base64Screenshot, screenCompareOptions);

  if (ignoredBoxes.length > 0) {
    screenCompareOptions.output.ignoredBoxes = ignoredBoxes;
  } // Execute the compare


  const compareResult = await (0, _executeCompare.executeCompare)(this.folders, screenshotData.fileName, screenCompareOptions); // Return compare results and if a baseline image was created

  return Object.assign(compareResult, {
    baselineImageCreated: !baselineImageExists
  });
}